# Sergas Super Account Manager - Continuous Integration Pipeline
# Automated testing, quality checks, and security scanning on every PR

name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feature/**', 'bugfix/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.14'
  POETRY_VERSION: '1.7.0'
  CACHE_VERSION: v1

jobs:
  # ===================================
  # Code Quality & Linting
  # ===================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false
          poetry install --no-root --with dev

      - name: Run Black formatting check
        run: black --check --diff src tests
        continue-on-error: false

      - name: Run isort import sorting check
        run: isort --check-only --diff src tests
        continue-on-error: false

      - name: Run Flake8 linting
        run: flake8 src tests --max-line-length=100 --extend-ignore=E203,W503
        continue-on-error: false

      - name: Run Pylint code analysis
        run: pylint src --max-line-length=100 --disable=C0111,C0103
        continue-on-error: true

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            .pylint-report.txt
          retention-days: 7

  # ===================================
  # Type Checking
  # ===================================
  typecheck:
    name: Type Checking (MyPy)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false
          poetry install --no-root --with dev

      - name: Run MyPy type checking
        run: |
          mypy src --strict --show-error-codes --pretty || true
          mypy src --strict --show-error-codes --pretty --junit-xml=mypy-report.xml

      - name: Upload type check results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: typecheck-results
          path: mypy-report.xml
          retention-days: 7

  # ===================================
  # Security Scanning
  # ===================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety pip-audit

      - name: Run Bandit security linter
        run: |
          bandit -r src -f json -o bandit-report.json || true
          bandit -r src -f txt
        continue-on-error: true

      - name: Run Safety vulnerability check
        run: |
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true

      - name: Run pip-audit vulnerability scanner
        run: |
          pip-audit --format json --output pip-audit-report.json || true
          pip-audit
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
          retention-days: 30

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===================================
  # Unit & Integration Tests
  # ===================================
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.12', '3.13', '3.14']

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-core.txt

      - name: Set test environment variables
        run: |
          echo "DATABASE_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "DATABASE_NAME=test_db" >> $GITHUB_ENV
          echo "DATABASE_USER=test_user" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=test_password" >> $GITHUB_ENV
          echo "REDIS_HOST=localhost" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV
          echo "ENV=test" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          alembic upgrade head
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit \
            -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=junit-unit.xml \
            --maxfail=5

      - name: Run integration tests
        run: |
          pytest tests/integration \
            -v \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --junit-xml=junit-integration.xml \
            --maxfail=3

      - name: Run end-to-end tests
        run: |
          pytest tests/e2e \
            -v \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --junit-xml=junit-e2e.xml \
            --maxfail=1
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests,python-${{ matrix.python-version }}
          name: python-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            junit-*.xml
            htmlcov/
            coverage.xml
          retention-days: 14

  # ===================================
  # Build & Package
  # ===================================
  build:
    name: Build & Package Application
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }} build wheel

      - name: Build package
        run: |
          poetry build
          python -m build

      - name: Verify package
        run: |
          pip install dist/*.whl
          python -c "import src; print('Package installed successfully')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # ===================================
  # Docker Build & Scan
  # ===================================
  docker:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/production/Dockerfile
          push: false
          load: true
          tags: sergas-super-account-manager:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: sergas-super-account-manager:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype sergas-super-account-manager:${{ github.sha }} -o json > grype-results.json
          grype sergas-super-account-manager:${{ github.sha }}

      - name: Upload Grype scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grype-scan-results
          path: grype-results.json
          retention-days: 30

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ===================================
  # Performance & Load Testing
  # ===================================
  performance:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 20
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust pytest-benchmark

      - name: Run performance benchmarks
        run: |
          pytest tests/performance \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 14

  # ===================================
  # Final Status Check
  # ===================================
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [lint, typecheck, security, test, build, docker]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.typecheck.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.docker.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All CI checks passed successfully!'
            })
