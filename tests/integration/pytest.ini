[tool:pytest]
# Pytest configuration for integration tests

# Test discovery
testpaths = .
python_files = *_test.py test_*.py *_tests.py
python_classes = Test*
python_functions = test_*

# Output configuration
addopts =
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10

# Async configuration
asyncio_mode = auto

# Markers
markers =
    integration: Marks tests as integration tests (may require external services)
    performance: Marks tests as performance tests (measure execution time)
    slow: Marks tests as slow running (may take more than 30 seconds)
    requires_external: Marks tests that require external services or APIs
    unit: Marks tests as unit tests (fast, isolated)
    smoke: Marks tests as smoke tests (basic functionality validation)
    regression: Marks tests as regression tests (prevent future breakage)

# Minimum version
minversion = 6.0

# Test coverage configuration
[coverage:run]
source = src
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/integration/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Timeout configuration
timeout = 300
timeout_method = thread

# Parallel execution
# Note: Install pytest-xdist for parallel execution: pip install pytest-xdist
# Run with: pytest -n auto

# Performance testing
# Note: Install pytest-benchmark for performance testing: pip install pytest-benchmark
# Run with: pytest --benchmark-only

# HTML reporting
# Note: Install pytest-html for HTML reports: pip install pytest-html
# Run with: pytest --html=report.html --self-contained-html

# JSON reporting
# Note: Install pytest-json-report for JSON reports: pip install pytest-json-report
# Run with: pytest --json-report --json-report-file=report.json