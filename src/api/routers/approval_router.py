"""Approval workflow router for FastAPI.

Handles approval responses for recommendations generated by agents.
"""

import structlog
from typing import Dict, Any, Optional, Literal

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field

from src.events.approval_manager import approval_manager, ApprovalStatus

logger = structlog.get_logger(__name__)

router = APIRouter()


class ApprovalResponseRequest(BaseModel):
    """Request schema for approval response."""

    approval_id: str = Field(..., description="Approval request ID")
    recommendation_id: str = Field(..., description="Recommendation ID")
    action: Literal["approve", "reject", "modify"] = Field(..., description="User action")
    modified_data: Optional[Dict[str, Any]] = Field(None, description="Modified recommendation data")
    reason: Optional[str] = Field(None, description="User's reason for decision")
    approved_by: Optional[str] = Field(None, description="User who approved")


class ApprovalResponseResponse(BaseModel):
    """Response schema for approval response."""

    status: str = Field(..., description="Response status")
    approval_id: str = Field(..., description="Approval request ID")
    recommendation_id: str = Field(..., description="Recommendation ID")
    action: str = Field(..., description="Action taken")
    applied: bool = Field(..., description="Whether action was applied")
    message: str = Field(..., description="Response message")


@router.post("/approval/respond", response_model=ApprovalResponseResponse)
async def respond_to_approval(
    body: ApprovalResponseRequest
) -> ApprovalResponseResponse:
    """Respond to an approval request.

    This endpoint allows users to approve, reject, or modify recommendations
    generated by agents. The response is matched to the pending approval request
    and triggers workflow continuation.

    Args:
        body: Approval response request

    Returns:
        ApprovalResponseResponse with result

    Raises:
        HTTPException: If approval not found or already responded

    Example Request:
        POST /api/approval/respond
        {
            "approval_id": "approval_abc123",
            "recommendation_id": "REC-456",
            "action": "approve",
            "reason": "Account shows strong engagement",
            "approved_by": "john.doe@example.com"
        }

    Example Response:
        {
            "status": "success",
            "approval_id": "approval_abc123",
            "recommendation_id": "REC-456",
            "action": "approve",
            "applied": true,
            "message": "Recommendation approved successfully"
        }
    """
    logger.info(
        "approval_response_received",
        approval_id=body.approval_id,
        action=body.action
    )

    try:
        # Submit response to approval manager
        approval = await approval_manager.respond_to_approval(
            approval_id=body.approval_id,
            action=body.action,
            modified_data=body.modified_data,
            reason=body.reason,
            approved_by=body.approved_by
        )

        # Prepare success response
        return ApprovalResponseResponse(
            status="success",
            approval_id=approval.approval_id,
            recommendation_id=approval.recommendation_id,
            action=approval.action,
            applied=True,
            message=f"Recommendation {approval.action}d successfully"
        )

    except ValueError as e:
        logger.error(
            "approval_response_error",
            error=str(e),
            approval_id=body.approval_id
        )
        raise HTTPException(status_code=404, detail=str(e))

    except Exception as e:
        logger.error(
            "approval_response_unexpected_error",
            error=str(e),
            approval_id=body.approval_id,
            exc_info=True
        )
        raise HTTPException(status_code=500, detail="Internal server error")


@router.get("/approval/{approval_id}")
async def get_approval_status(approval_id: str) -> Dict[str, Any]:
    """Get approval request status.

    Args:
        approval_id: Approval request ID

    Returns:
        Approval request details

    Raises:
        HTTPException: If approval not found
    """
    approval = await approval_manager.get_approval_request(approval_id)

    if not approval:
        raise HTTPException(
            status_code=404,
            detail=f"Approval request {approval_id} not found"
        )

    return approval.to_dict()


@router.get("/approvals/active")
async def get_active_approvals() -> Dict[str, int]:
    """Get count of active (pending) approval requests.

    Returns:
        Active approval count
    """
    count = await approval_manager.get_active_count()
    return {"active_approvals": count}
