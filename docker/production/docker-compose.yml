# Sergas Super Account Manager - Production Docker Compose
# Full-stack deployment with all services

version: '3.8'

services:
  # ===================================
  # Application Service
  # ===================================
  app:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-production}
        VERSION: ${VERSION:-latest}
    image: sergas-super-account-manager:${VERSION:-latest}
    container_name: sergas-app
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      ENV: ${ENV:-production}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-sergas_agent_db}
      DATABASE_USER: ${DATABASE_USER:-sergas_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ZOHO_CLIENT_ID: ${ZOHO_CLIENT_ID}
      ZOHO_CLIENT_SECRET: ${ZOHO_CLIENT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENABLE_METRICS: "true"
      RUN_MIGRATIONS: "true"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sergas-network
    volumes:
      - app-logs:/app/logs
      - app-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ===================================
  # PostgreSQL Database
  # ===================================
  postgres:
    image: postgres:16-alpine
    container_name: sergas-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-sergas_agent_db}
      POSTGRES_USER: ${DATABASE_USER:-sergas_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sergas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-sergas_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ===================================
  # Redis Cache
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: sergas-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - sergas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # ===================================
  # Prometheus Monitoring
  # ===================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sergas-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ../../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - sergas-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ===================================
  # Grafana Dashboards
  # ===================================
  grafana:
    image: grafana/grafana:latest
    container_name: sergas-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
    volumes:
      - ../../grafana/provisioning:/etc/grafana/provisioning:ro
      - ../../grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    networks:
      - sergas-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # ===================================
  # Nginx Reverse Proxy
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: sergas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - sergas-network
    depends_on:
      - app
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

networks:
  sergas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  app-logs:
    driver: local
  app-data:
    driver: local
  nginx-logs:
    driver: local
